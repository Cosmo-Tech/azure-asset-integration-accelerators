{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "o-rv59ypnn5yg-assetdemo2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DeleteAgingFamilies_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1-AssetPortfolio/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteAgingFamilies",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteAgingFamilies"
						},
						{
							"dataset": {
								"referenceName": "TempInput_AgingFamiliesStatus",
								"type": "DatasetReference"
							},
							"name": "AgingFamiliesStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "1_320",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingNameRows"
						},
						{
							"dataset": {
								"referenceName": "1_321",
								"type": "DatasetReference"
							},
							"name": "WriteMissingNameRows"
						}
					],
					"transformations": [
						{
							"name": "ExistingNameInAgingFamiliesStatus"
						},
						{
							"name": "CheckMandatoryData"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteAgingFamilies\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> AgingFamiliesStatus\nReadDeleteAgingFamilies, AgingFamiliesStatus exists(ReadDeleteAgingFamilies@Name == AgingFamiliesStatus@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistingNameInAgingFamiliesStatus\nReadDeleteAgingFamilies split(isNull(Name),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingName)\nExistingNameInAgingFamiliesStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-320-NotExistingName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingNameRows\nCheckMandatoryData@MissingName sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-321-MissColumnName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingNameRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteAgingFamilies_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1-AssetPortfolio/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteAgingFamilies",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteAgingFamilies"
						},
						{
							"dataset": {
								"referenceName": "TempInput_AgingFamiliesStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusAgingFamiliesStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsAgingFamiliesStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_SubActionFamiliesAgingFamiliesApplicationStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusSubActionFamiliesAgingFamiliesApplicationStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_SubActionFamiliesAgingFamiliesReplacementStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusSubActionFamiliesAgingFamiliesReplacementStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AssetPortfolioDeleteEntity_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateAgingFamiliesStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionAgingFamiliesStatusEditor"
						},
						{
							"name": "StatusUpdateAgingFamiliesStatusEditor"
						},
						{
							"name": "StatusColumnSelectionAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"name": "StatusUpdateAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"name": "StatusColumnSelectionSubActionFamiliesAgingFamiliesApplicationStatusEditor"
						},
						{
							"name": "StatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor"
						},
						{
							"name": "StatusColumnSelectionSubActionFamiliesAgingFamiliesReplacementStatusEditor"
						},
						{
							"name": "StatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteAgingFamilies\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusAgingFamiliesStatusEditor\nsource(output(\n\t\tEquipmentComponent as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor\nsource(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusSubActionFamiliesAgingFamiliesApplicationStatusEditor\nsource(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusSubActionFamiliesAgingFamiliesReplacementStatusEditor\nReadDeleteAgingFamilies select(mapColumn(\n\t\t{$id} = Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$metadata.$model} = 'dtmi:AgingFamily;1',\n\t\t{$entityDelete} = 'true') ~> ModelDefinition\nReadDeleteAgingFamilies select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionAgingFamiliesStatusEditor\nReadTempStatusAgingFamiliesStatusEditor, StatusColumnSelectionAgingFamiliesStatusEditor exists(ReadTempStatusAgingFamiliesStatusEditor@Name == StatusColumnSelectionAgingFamiliesStatusEditor@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateAgingFamiliesStatusEditor\nReadDeleteAgingFamilies select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor\nReadTempStatusAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor, StatusColumnSelectionAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor exists(Name == AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor\nReadDeleteAgingFamilies select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionSubActionFamiliesAgingFamiliesApplicationStatusEditor\nReadTempStatusSubActionFamiliesAgingFamiliesApplicationStatusEditor, StatusColumnSelectionSubActionFamiliesAgingFamiliesApplicationStatusEditor exists(Name == AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor\nReadDeleteAgingFamilies select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionSubActionFamiliesAgingFamiliesReplacementStatusEditor\nReadTempStatusSubActionFamiliesAgingFamiliesReplacementStatusEditor, StatusColumnSelectionSubActionFamiliesAgingFamiliesReplacementStatusEditor exists(Name == AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_AgingFamilies.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateAgingFamiliesStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['AgingFamilies_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateAgingFamiliesStatusEditor\nStatusUpdateAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['AgingFamily_EquipmentComponentsAgingFamilies_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateAgingFamilyEquipmentComponentsAgingFamiliesStatusEditor\nStatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SubActionFamiliesAgingFamiliesApplication_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor\nStatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SubActionFamiliesAgingFamiliesReplacement_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteBudgets_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3-Budgets/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteBudgets",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteBudgets"
						},
						{
							"dataset": {
								"referenceName": "TempInput_BudgetsStatus",
								"type": "DatasetReference"
							},
							"name": "BudgetsStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "3_310",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingNameRows"
						},
						{
							"dataset": {
								"referenceName": "3_311",
								"type": "DatasetReference"
							},
							"name": "WriteMissingNameRows"
						}
					],
					"transformations": [
						{
							"name": "ExistingNameInBudgetsStatus"
						},
						{
							"name": "CheckMandatoryData"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteBudgets\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> BudgetsStatus\nReadDeleteBudgets, BudgetsStatus exists(ReadDeleteBudgets@Name == BudgetsStatus@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistingNameInBudgetsStatus\nReadDeleteBudgets split(isNull(Name),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingName)\nExistingNameInBudgetsStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['3-310-NotExistingName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingNameRows\nCheckMandatoryData@MissingName sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['3-311-MissColumnName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingNameRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteBudgets_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3-Budgets/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteBudgets",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteBudgets"
						},
						{
							"dataset": {
								"referenceName": "TempInput_BudgetsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusBudgetsStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BudgetsDeleteEntity_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateBudgetsStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionBudgetsStatusEditor"
						},
						{
							"name": "StatusUpdateBudgetsStatusEditor"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteBudgets\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusBudgetsStatusEditor\nReadDeleteBudgets select(mapColumn(\n\t\t{$id} = Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$metadata.$model} = 'dtmi:Budget;1',\n\t\t{$entityDelete} = 'true') ~> ModelDefinition\nReadDeleteBudgets select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionBudgetsStatusEditor\nReadTempStatusBudgetsStatusEditor, StatusColumnSelectionBudgetsStatusEditor exists(ReadTempStatusBudgetsStatusEditor@Name == StatusColumnSelectionBudgetsStatusEditor@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateBudgetsStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_Budgets.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateBudgetsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Budgets_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateBudgetsStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteCriteria_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2-ActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteCriteria",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteCriteria"
						},
						{
							"dataset": {
								"referenceName": "TempInput_CriteriaStatus",
								"type": "DatasetReference"
							},
							"name": "CriteriaStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "2_320",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingNameRows"
						},
						{
							"dataset": {
								"referenceName": "2_321",
								"type": "DatasetReference"
							},
							"name": "WriteMissingNameRows"
						}
					],
					"transformations": [
						{
							"name": "ExistingNameInCriteriaStatus"
						},
						{
							"name": "CheckMandatoryData"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteCriteria\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> CriteriaStatus\nReadDeleteCriteria, CriteriaStatus exists(ReadDeleteCriteria@Name == CriteriaStatus@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistingNameInCriteriaStatus\nReadDeleteCriteria split(isNull(Name),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingName)\nExistingNameInCriteriaStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['2-320-NotExistingName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingNameRows\nCheckMandatoryData@MissingName sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['2-321-MissColumnName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingNameRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteCriteria_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2-ActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteCriteria",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteCriteria"
						},
						{
							"dataset": {
								"referenceName": "TempInput_CriteriaStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusCriteriaStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_TechnicalPoliciesCriteriaStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusCriterionTechnicalPoliciesCriteriaStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ActivitiesManagementDeleteEntity_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateCriteriaStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateCriterionTechnicalPoliciesCriteriaStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionCriteriaStatusEditor"
						},
						{
							"name": "StatusUpdateCriteriaStatusEditor"
						},
						{
							"name": "StatusColumnSelectionCriterionTechnicalPoliciesCriteriaStatusEditor"
						},
						{
							"name": "StatusUpdateCriterionTechnicalPoliciesCriteriaStatusEditor"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteCriteria\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusCriteriaStatusEditor\nsource(output(\n\t\tTechnicalPolicy as string,\n\t\tCriterion as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusCriterionTechnicalPoliciesCriteriaStatusEditor\nReadDeleteCriteria select(mapColumn(\n\t\t{$id} = Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$metadata.$model} = 'dtmi:Criterion;1',\n\t\t{$entityDelete} = 'true') ~> ModelDefinition\nReadDeleteCriteria select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionCriteriaStatusEditor\nReadTempStatusCriteriaStatusEditor, StatusColumnSelectionCriteriaStatusEditor exists(ReadTempStatusCriteriaStatusEditor@Name == StatusColumnSelectionCriteriaStatusEditor@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateCriteriaStatusEditor\nReadDeleteCriteria select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionCriterionTechnicalPoliciesCriteriaStatusEditor\nReadTempStatusCriterionTechnicalPoliciesCriteriaStatusEditor, StatusColumnSelectionCriterionTechnicalPoliciesCriteriaStatusEditor exists(Name == Criterion,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateCriterionTechnicalPoliciesCriteriaStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_Criteria.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateCriteriaStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Criteria_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateCriteriaStatusEditor\nStatusUpdateCriterionTechnicalPoliciesCriteriaStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Criterion_TechnicalPoliciesCriteria_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateCriterionTechnicalPoliciesCriteriaStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentComponentsAgingFamilies_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1-AssetPortfolio/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentComponentsAgingFamilies",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentComponentsAgingFamilies"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsAgingFamiliesStatus",
								"type": "DatasetReference"
							},
							"name": "EquipmentComponentsAgingFamiliesStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "1_411",
								"type": "DatasetReference"
							},
							"name": "WriteMissingEquipmentComponentRows"
						},
						{
							"dataset": {
								"referenceName": "1_411",
								"type": "DatasetReference"
							},
							"name": "WriteMissingAgingFamilyRows"
						},
						{
							"dataset": {
								"referenceName": "1_410",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingEquipmentComponentRows"
						}
					],
					"transformations": [
						{
							"name": "CheckMandatoryData"
						},
						{
							"name": "StatusEquipmentComponentAgingFamilyExistenceCheckInEquipmentComponentsAgingFamiliesStatus"
						}
					],
					"script": "source(output(\n\t\tEquipmentComponent as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentComponentsAgingFamilies\nsource(output(\n\t\tEquipmentComponent as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> EquipmentComponentsAgingFamiliesStatus\nReadDeleteEquipmentComponentsAgingFamilies split(isNull(EquipmentComponent),\n\tisNull(AgingFamily),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingEquipmentComponent, MissingAgingFamily)\nReadDeleteEquipmentComponentsAgingFamilies, EquipmentComponentsAgingFamiliesStatus exists(ReadDeleteEquipmentComponentsAgingFamilies@EquipmentComponent == EquipmentComponentsAgingFamiliesStatus@EquipmentComponent && ReadDeleteEquipmentComponentsAgingFamilies@AgingFamily == EquipmentComponentsAgingFamiliesStatus@AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusEquipmentComponentAgingFamilyExistenceCheckInEquipmentComponentsAgingFamiliesStatus\nCheckMandatoryData@MissingEquipmentComponent sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-411-MissColumnEquipmentComponent.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingEquipmentComponentRows\nCheckMandatoryData@MissingAgingFamily sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-411-MissColumnAgingFamily.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingAgingFamilyRows\nStatusEquipmentComponentAgingFamilyExistenceCheckInEquipmentComponentsAgingFamiliesStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-410-NotExistingEquipmentComponent.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingEquipmentComponentRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentComponentsAgingFamilies_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1-AssetPortfolio/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentComponentsAgingFamilies",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentComponentsAgingFamilies"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsAgingFamiliesStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentComponentsAgingFamiliesStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AssetPortfolioDeleteRelationship_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentComponentsAgingFamiliesStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentComponentsAgingFamiliesStatusEditor"
						}
					],
					"script": "source(output(\n\t\tEquipmentComponent as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentComponentsAgingFamilies\nsource(output(\n\t\tEquipmentComponent as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentComponentsAgingFamiliesStatusEditor\nReadDeleteEquipmentComponentsAgingFamilies select(mapColumn(\n\t\t{$sourceId} = EquipmentComponent,\n\t\t{$targetId} = AgingFamily\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$relationshipName} = 'AgingLaw',\n\t\t{$relationshipDelete} = 'true',\n\t\t{$relationshipId} = {$sourceId} + 'to' + {$targetId}) ~> ModelDefinition\nReadDeleteEquipmentComponentsAgingFamilies select(mapColumn(\n\t\tEquipmentComponent,\n\t\tAgingFamily\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentComponentsAgingFamiliesStatusEditor\nReadTempStatusEquipmentComponentsAgingFamiliesStatusEditor, StatusColumnSelectionEquipmentComponentsAgingFamiliesStatusEditor exists(ReadTempStatusEquipmentComponentsAgingFamiliesStatusEditor@EquipmentComponent == StatusColumnSelectionEquipmentComponentsAgingFamiliesStatusEditor@EquipmentComponent && ReadTempStatusEquipmentComponentsAgingFamiliesStatusEditor@AgingFamily == StatusColumnSelectionEquipmentComponentsAgingFamiliesStatusEditor@AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentComponentsAgingFamiliesStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_EquipmentComponentsAgingFamilies.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateEquipmentComponentsAgingFamiliesStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentComponentsAgingFamilies_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentComponentsAgingFamiliesStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentComponentsEquipmentComponents_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1-AssetPortfolio/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentComponentsEquipmentComponents",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentComponentsEquipmentComponents"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsEquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "EquipmentComponentsEquipmentComponentsStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "1_421",
								"type": "DatasetReference"
							},
							"name": "WriteMissingEquipmentComponentSourceRows"
						},
						{
							"dataset": {
								"referenceName": "1_421",
								"type": "DatasetReference"
							},
							"name": "WriteMissingEquipmentComponentTargetRows"
						},
						{
							"dataset": {
								"referenceName": "1_420",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingEquipmentComponentSourceRows"
						}
					],
					"transformations": [
						{
							"name": "CheckMandatoryData"
						},
						{
							"name": "StatusEquipmentComponentSourceEquipmentComponentTargetExistenceCheckInEquipmentComponentsEquipmentComponentsStatus"
						}
					],
					"script": "source(output(\n\t\tEquipmentComponentSource as string,\n\t\tEquipmentComponentTarget as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentComponentsEquipmentComponents\nsource(output(\n\t\tEquipmentComponentSource as string,\n\t\tEquipmentComponentTarget as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> EquipmentComponentsEquipmentComponentsStatus\nReadDeleteEquipmentComponentsEquipmentComponents split(isNull(EquipmentComponentSource),\n\tisNull(EquipmentComponentTarget),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingEquipmentComponentSource, MissingEquipmentComponentTarget)\nReadDeleteEquipmentComponentsEquipmentComponents, EquipmentComponentsEquipmentComponentsStatus exists(ReadDeleteEquipmentComponentsEquipmentComponents@EquipmentComponentSource == EquipmentComponentsEquipmentComponentsStatus@EquipmentComponentSource && ReadDeleteEquipmentComponentsEquipmentComponents@EquipmentComponentTarget == EquipmentComponentsEquipmentComponentsStatus@EquipmentComponentTarget,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusEquipmentComponentSourceEquipmentComponentTargetExistenceCheckInEquipmentComponentsEquipmentComponentsStatus\nCheckMandatoryData@MissingEquipmentComponentSource sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-421-MissColumnEquipmentComponentSource.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingEquipmentComponentSourceRows\nCheckMandatoryData@MissingEquipmentComponentTarget sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-421-MissColumnEquipmentComponentTarget.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingEquipmentComponentTargetRows\nStatusEquipmentComponentSourceEquipmentComponentTargetExistenceCheckInEquipmentComponentsEquipmentComponentsStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-420-NotExistingEquipmentComponentSource.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingEquipmentComponentSourceRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentComponentsEquipmentComponents_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1-AssetPortfolio/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentComponentsEquipmentComponents",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentComponentsEquipmentComponents"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsEquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentComponentsEquipmentComponentsStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AssetPortfolioDeleteRelationship_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentComponentsEquipmentComponentsStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentComponentsEquipmentComponentsStatusEditor"
						}
					],
					"script": "source(output(\n\t\tEquipmentComponentSource as string,\n\t\tEquipmentComponentTarget as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentComponentsEquipmentComponents\nsource(output(\n\t\tEquipmentComponentSource as string,\n\t\tEquipmentComponentTarget as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentComponentsEquipmentComponentsStatusEditor\nReadDeleteEquipmentComponentsEquipmentComponents select(mapColumn(\n\t\t{$sourceId} = EquipmentComponentSource,\n\t\t{$targetId} = EquipmentComponentTarget\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$relationshipName} = 'AgingInteraction',\n\t\t{$relationshipDelete} = 'true',\n\t\t{$relationshipId} = {$sourceId} + 'to' + {$targetId}) ~> ModelDefinition\nReadDeleteEquipmentComponentsEquipmentComponents select(mapColumn(\n\t\tEquipmentComponentSource,\n\t\tEquipmentComponentTarget\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentComponentsEquipmentComponentsStatusEditor\nReadTempStatusEquipmentComponentsEquipmentComponentsStatusEditor, StatusColumnSelectionEquipmentComponentsEquipmentComponentsStatusEditor exists(ReadTempStatusEquipmentComponentsEquipmentComponentsStatusEditor@EquipmentComponentSource == StatusColumnSelectionEquipmentComponentsEquipmentComponentsStatusEditor@EquipmentComponentSource && ReadTempStatusEquipmentComponentsEquipmentComponentsStatusEditor@EquipmentComponentTarget == StatusColumnSelectionEquipmentComponentsEquipmentComponentsStatusEditor@EquipmentComponentTarget,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentComponentsEquipmentComponentsStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_EquipmentComponentsEquipmentComponents.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateEquipmentComponentsEquipmentComponentsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentComponentsEquipmentComponents_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentComponentsEquipmentComponentsStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentComponents_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1-AssetPortfolio/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentComponents",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentComponents"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "EquipmentComponentsStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "1_310",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingNameRows"
						},
						{
							"dataset": {
								"referenceName": "1_311",
								"type": "DatasetReference"
							},
							"name": "WriteMissingNameRows"
						}
					],
					"transformations": [
						{
							"name": "ExistingNameInEquipmentComponentsStatus"
						},
						{
							"name": "CheckMandatoryData"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentComponents\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> EquipmentComponentsStatus\nReadDeleteEquipmentComponents, EquipmentComponentsStatus exists(ReadDeleteEquipmentComponents@Name == EquipmentComponentsStatus@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistingNameInEquipmentComponentsStatus\nReadDeleteEquipmentComponents split(isNull(Name),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingName)\nExistingNameInEquipmentComponentsStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-310-NotExistingName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingNameRows\nCheckMandatoryData@MissingName sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['1-311-MissColumnName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingNameRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentComponents_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "1-AssetPortfolio/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentComponents",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentComponents"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentComponentsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsAgingFamiliesStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsEquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentComponentsEquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentGroupsEquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AssetPortfolioDeleteEntity_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentComponentsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusColumnSelectionEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor"
						},
						{
							"name": "StatusColumnSelectionEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusColumnSelectionEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentComponents\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentComponentsStatusEditor\nsource(output(\n\t\tEquipmentComponent as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor\nsource(output(\n\t\tEquipmentComponentSource as string,\n\t\tEquipmentComponentTarget as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor\nsource(output(\n\t\tEquipmentComponentSource as string,\n\t\tEquipmentComponentTarget as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor\nsource(output(\n\t\tEquipmentGroup as string,\n\t\tEquipmentComponent as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor\nReadDeleteEquipmentComponents select(mapColumn(\n\t\t{$id} = Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$metadata.$model} = 'dtmi:EquipmentComponent;1',\n\t\t{$entityDelete} = 'true') ~> ModelDefinition\nReadDeleteEquipmentComponents select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentComponentsStatusEditor\nReadTempStatusEquipmentComponentsStatusEditor, StatusColumnSelectionEquipmentComponentsStatusEditor exists(ReadTempStatusEquipmentComponentsStatusEditor@Name == StatusColumnSelectionEquipmentComponentsStatusEditor@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentComponentsStatusEditor\nReadDeleteEquipmentComponents select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor\nReadTempStatusEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor, StatusColumnSelectionEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor exists(Name == EquipmentComponent,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor\nReadDeleteEquipmentComponents select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor\nReadTempStatusEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor, StatusColumnSelectionEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor exists(Name == EquipmentComponentSource,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor\nReadDeleteEquipmentComponents select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor\nReadTempStatusEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor, StatusColumnSelectionEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor exists(Name == EquipmentComponentTarget,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor\nReadDeleteEquipmentComponents select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor\nReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor, StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor exists(Name == EquipmentComponent,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_EquipmentComponents.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateEquipmentComponentsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentComponents_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentComponentsStatusEditor\nStatusUpdateEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentComponent_EquipmentComponentsAgingFamilies_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentComponentEquipmentComponentsAgingFamiliesStatusEditor\nStatusUpdateEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentComponentSource_EquipmentComponentsEquipmentComponents_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentComponentSourceEquipmentComponentsEquipmentComponentsStatusEditor\nStatusUpdateEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentComponentTarget_EquipmentComponentsEquipmentComponents_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentComponentTargetEquipmentComponentsEquipmentComponentsStatusEditor\nStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentGroupsEquipmentComponents_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentGroupsEquipmentComponents_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "11-AssetPortfolioActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentGroupsEquipmentComponents",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentGroupsEquipmentComponents"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentGroupsEquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "EquipmentGroupsEquipmentComponentsStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "11_441",
								"type": "DatasetReference"
							},
							"name": "WriteMissingEquipmentGroupRows"
						},
						{
							"dataset": {
								"referenceName": "11_441",
								"type": "DatasetReference"
							},
							"name": "WriteMissingEquipmentComponentRows"
						},
						{
							"dataset": {
								"referenceName": "11_440",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingEquipmentGroupRows"
						}
					],
					"transformations": [
						{
							"name": "CheckMandatoryData"
						},
						{
							"name": "StatusEquipmentGroupEquipmentComponentExistenceCheckInEquipmentGroupsEquipmentComponentsStatus"
						}
					],
					"script": "source(output(\n\t\tEquipmentGroup as string,\n\t\tEquipmentComponent as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentGroupsEquipmentComponents\nsource(output(\n\t\tEquipmentGroup as string,\n\t\tEquipmentComponent as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> EquipmentGroupsEquipmentComponentsStatus\nReadDeleteEquipmentGroupsEquipmentComponents split(isNull(EquipmentGroup),\n\tisNull(EquipmentComponent),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingEquipmentGroup, MissingEquipmentComponent)\nReadDeleteEquipmentGroupsEquipmentComponents, EquipmentGroupsEquipmentComponentsStatus exists(ReadDeleteEquipmentGroupsEquipmentComponents@EquipmentGroup == EquipmentGroupsEquipmentComponentsStatus@EquipmentGroup && ReadDeleteEquipmentGroupsEquipmentComponents@EquipmentComponent == EquipmentGroupsEquipmentComponentsStatus@EquipmentComponent,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusEquipmentGroupEquipmentComponentExistenceCheckInEquipmentGroupsEquipmentComponentsStatus\nCheckMandatoryData@MissingEquipmentGroup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-441-MissColumnEquipmentGroup.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingEquipmentGroupRows\nCheckMandatoryData@MissingEquipmentComponent sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-441-MissColumnEquipmentComponent.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingEquipmentComponentRows\nStatusEquipmentGroupEquipmentComponentExistenceCheckInEquipmentGroupsEquipmentComponentsStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-440-NotExistingEquipmentGroup.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingEquipmentGroupRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentGroupsEquipmentComponents_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "11-AssetPortfolioActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentGroupsEquipmentComponents",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentGroupsEquipmentComponents"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentGroupsEquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AssetPortfolioActivitiesManagementDeleteRelationship_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"script": "source(output(\n\t\tEquipmentGroup as string,\n\t\tEquipmentComponent as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentGroupsEquipmentComponents\nsource(output(\n\t\tEquipmentGroup as string,\n\t\tEquipmentComponent as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor\nReadDeleteEquipmentGroupsEquipmentComponents select(mapColumn(\n\t\t{$sourceId} = EquipmentGroup,\n\t\t{$targetId} = EquipmentComponent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$relationshipName} = 'Group_contains_EquipmentComponent',\n\t\t{$relationshipDelete} = 'true',\n\t\t{$relationshipId} = {$sourceId} + 'to' + {$targetId}) ~> ModelDefinition\nReadDeleteEquipmentGroupsEquipmentComponents select(mapColumn(\n\t\tEquipmentGroup,\n\t\tEquipmentComponent\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor\nReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor, StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor exists(ReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor@EquipmentGroup == StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor@EquipmentGroup && ReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor@EquipmentComponent == StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor@EquipmentComponent,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_EquipmentGroupsEquipmentComponents.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentGroupsEquipmentComponents_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentGroups_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "11-AssetPortfolioActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentGroups",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentGroups"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentGroupsStatus",
								"type": "DatasetReference"
							},
							"name": "EquipmentGroupsStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "11_320",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingNameRows"
						},
						{
							"dataset": {
								"referenceName": "11_321",
								"type": "DatasetReference"
							},
							"name": "WriteMissingNameRows"
						}
					],
					"transformations": [
						{
							"name": "ExistingNameInEquipmentGroupsStatus"
						},
						{
							"name": "CheckMandatoryData"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentGroups\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> EquipmentGroupsStatus\nReadDeleteEquipmentGroups, EquipmentGroupsStatus exists(ReadDeleteEquipmentGroups@Name == EquipmentGroupsStatus@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistingNameInEquipmentGroupsStatus\nReadDeleteEquipmentGroups split(isNull(Name),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingName)\nExistingNameInEquipmentGroupsStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-320-NotExistingName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingNameRows\nCheckMandatoryData@MissingName sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-321-MissColumnName.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingNameRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteEquipmentGroups_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "11-AssetPortfolioActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteEquipmentGroups",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteEquipmentGroups"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentGroupsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentGroupsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_SustainmentActionsEquipmentGroupsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusSustainmentActionsEquipmentGroupsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempInput_EquipmentGroupsEquipmentComponentsStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AssetPortfolioActivitiesManagementDeleteEntity_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentGroupsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateSustainmentActionsEquipmentGroupsStatusEditor"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionEquipmentGroupsStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentGroupsStatusEditor"
						},
						{
							"name": "StatusColumnSelectionSustainmentActionsEquipmentGroupsStatusEditor"
						},
						{
							"name": "StatusUpdateSustainmentActionsEquipmentGroupsStatusEditor"
						},
						{
							"name": "StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor"
						},
						{
							"name": "StatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
						}
					],
					"script": "source(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteEquipmentGroups\nsource(output(\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentGroupsStatusEditor\nsource(output(\n\t\tSustainmentAction as string,\n\t\tEquipmentGroup as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusSustainmentActionsEquipmentGroupsStatusEditor\nsource(output(\n\t\tEquipmentGroup as string,\n\t\tEquipmentComponent as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor\nReadDeleteEquipmentGroups select(mapColumn(\n\t\t{$id} = Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$metadata.$model} = 'dtmi:EquipmentGroup;1',\n\t\t{$entityDelete} = 'true') ~> ModelDefinition\nReadDeleteEquipmentGroups select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentGroupsStatusEditor\nReadTempStatusEquipmentGroupsStatusEditor, StatusColumnSelectionEquipmentGroupsStatusEditor exists(ReadTempStatusEquipmentGroupsStatusEditor@Name == StatusColumnSelectionEquipmentGroupsStatusEditor@Name,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentGroupsStatusEditor\nReadDeleteEquipmentGroups select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionSustainmentActionsEquipmentGroupsStatusEditor\nReadTempStatusSustainmentActionsEquipmentGroupsStatusEditor, StatusColumnSelectionSustainmentActionsEquipmentGroupsStatusEditor exists(Name == EquipmentGroup,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateSustainmentActionsEquipmentGroupsStatusEditor\nReadDeleteEquipmentGroups select(mapColumn(\n\t\tName\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor\nReadTempStatusEquipmentGroupsEquipmentComponentsStatusEditor, StatusColumnSelectionEquipmentGroupsEquipmentComponentsStatusEditor exists(Name == EquipmentGroup,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_EquipmentGroups.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateEquipmentGroupsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentGroups_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentGroupsStatusEditor\nStatusUpdateSustainmentActionsEquipmentGroupsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SustainmentActionsEquipmentGroups_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateSustainmentActionsEquipmentGroupsStatusEditor\nStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['EquipmentGroupsEquipmentComponents_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateEquipmentGroupsEquipmentComponentsStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteSubActionFamiliesAgingFamiliesApplication_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "11-AssetPortfolioActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteSubActionFamiliesAgingFamiliesApplication",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteSubActionFamiliesAgingFamiliesApplication"
						},
						{
							"dataset": {
								"referenceName": "TempInput_SubActionFamiliesAgingFamiliesApplicationStatus",
								"type": "DatasetReference"
							},
							"name": "SubActionFamiliesAgingFamiliesApplicationStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "11_421",
								"type": "DatasetReference"
							},
							"name": "WriteMissingSubActionFamilyRows"
						},
						{
							"dataset": {
								"referenceName": "11_421",
								"type": "DatasetReference"
							},
							"name": "WriteMissingAgingFamilyRows"
						},
						{
							"dataset": {
								"referenceName": "11_420",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingSubActionFamilyRows"
						}
					],
					"transformations": [
						{
							"name": "CheckMandatoryData"
						},
						{
							"name": "StatusSubActionFamilyAgingFamilyExistenceCheckInSubActionFamiliesAgingFamiliesApplicationStatus"
						}
					],
					"script": "source(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteSubActionFamiliesAgingFamiliesApplication\nsource(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> SubActionFamiliesAgingFamiliesApplicationStatus\nReadDeleteSubActionFamiliesAgingFamiliesApplication split(isNull(SubActionFamily),\n\tisNull(AgingFamily),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingSubActionFamily, MissingAgingFamily)\nReadDeleteSubActionFamiliesAgingFamiliesApplication, SubActionFamiliesAgingFamiliesApplicationStatus exists(ReadDeleteSubActionFamiliesAgingFamiliesApplication@SubActionFamily == SubActionFamiliesAgingFamiliesApplicationStatus@SubActionFamily && ReadDeleteSubActionFamiliesAgingFamiliesApplication@AgingFamily == SubActionFamiliesAgingFamiliesApplicationStatus@AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusSubActionFamilyAgingFamilyExistenceCheckInSubActionFamiliesAgingFamiliesApplicationStatus\nCheckMandatoryData@MissingSubActionFamily sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-421-MissColumnSubActionFamily.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingSubActionFamilyRows\nCheckMandatoryData@MissingAgingFamily sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-421-MissColumnAgingFamily.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingAgingFamilyRows\nStatusSubActionFamilyAgingFamilyExistenceCheckInSubActionFamiliesAgingFamiliesApplicationStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-420-NotExistingSubActionFamily.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingSubActionFamilyRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteSubActionFamiliesAgingFamiliesApplication_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "11-AssetPortfolioActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteSubActionFamiliesAgingFamiliesApplication",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteSubActionFamiliesAgingFamiliesApplication"
						},
						{
							"dataset": {
								"referenceName": "TempInput_SubActionFamiliesAgingFamiliesApplicationStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusSubActionFamiliesAgingFamiliesApplicationStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AssetPortfolioActivitiesManagementDeleteRelationship_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionSubActionFamiliesAgingFamiliesApplicationStatusEditor"
						},
						{
							"name": "StatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor"
						}
					],
					"script": "source(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteSubActionFamiliesAgingFamiliesApplication\nsource(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusSubActionFamiliesAgingFamiliesApplicationStatusEditor\nReadDeleteSubActionFamiliesAgingFamiliesApplication select(mapColumn(\n\t\t{$sourceId} = SubActionFamily,\n\t\t{$targetId} = AgingFamily\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$relationshipName} = 'apply_to_AgingFamily',\n\t\t{$relationshipDelete} = 'true',\n\t\t{$relationshipId} = {$sourceId} + 'to' + {$targetId}) ~> ModelDefinition\nReadDeleteSubActionFamiliesAgingFamiliesApplication select(mapColumn(\n\t\tSubActionFamily,\n\t\tAgingFamily\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionSubActionFamiliesAgingFamiliesApplicationStatusEditor\nReadTempStatusSubActionFamiliesAgingFamiliesApplicationStatusEditor, StatusColumnSelectionSubActionFamiliesAgingFamiliesApplicationStatusEditor exists(ReadTempStatusSubActionFamiliesAgingFamiliesApplicationStatusEditor@SubActionFamily == StatusColumnSelectionSubActionFamiliesAgingFamiliesApplicationStatusEditor@SubActionFamily && ReadTempStatusSubActionFamiliesAgingFamiliesApplicationStatusEditor@AgingFamily == StatusColumnSelectionSubActionFamiliesAgingFamiliesApplicationStatusEditor@AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_SubActionFamiliesAgingFamiliesApplication.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SubActionFamiliesAgingFamiliesApplication_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateSubActionFamiliesAgingFamiliesApplicationStatusEditor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteSubActionFamiliesAgingFamiliesReplacement_CheckData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "11-AssetPortfolioActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteSubActionFamiliesAgingFamiliesReplacement",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteSubActionFamiliesAgingFamiliesReplacement"
						},
						{
							"dataset": {
								"referenceName": "TempInput_SubActionFamiliesAgingFamiliesReplacementStatus",
								"type": "DatasetReference"
							},
							"name": "SubActionFamiliesAgingFamiliesReplacementStatus"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "11_431",
								"type": "DatasetReference"
							},
							"name": "WriteMissingSubActionFamilyRows"
						},
						{
							"dataset": {
								"referenceName": "11_431",
								"type": "DatasetReference"
							},
							"name": "WriteMissingAgingFamilyRows"
						},
						{
							"dataset": {
								"referenceName": "11_430",
								"type": "DatasetReference"
							},
							"name": "WriteNotExistingSubActionFamilyRows"
						}
					],
					"transformations": [
						{
							"name": "CheckMandatoryData"
						},
						{
							"name": "StatusSubActionFamilyAgingFamilyExistenceCheckInSubActionFamiliesAgingFamiliesReplacementStatus"
						}
					],
					"script": "source(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteSubActionFamiliesAgingFamiliesReplacement\nsource(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> SubActionFamiliesAgingFamiliesReplacementStatus\nReadDeleteSubActionFamiliesAgingFamiliesReplacement split(isNull(SubActionFamily),\n\tisNull(AgingFamily),\n\tdisjoint: false) ~> CheckMandatoryData@(MissingSubActionFamily, MissingAgingFamily)\nReadDeleteSubActionFamiliesAgingFamiliesReplacement, SubActionFamiliesAgingFamiliesReplacementStatus exists(ReadDeleteSubActionFamiliesAgingFamiliesReplacement@SubActionFamily == SubActionFamiliesAgingFamiliesReplacementStatus@SubActionFamily && ReadDeleteSubActionFamiliesAgingFamiliesReplacement@AgingFamily == SubActionFamiliesAgingFamiliesReplacementStatus@AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusSubActionFamilyAgingFamilyExistenceCheckInSubActionFamiliesAgingFamiliesReplacementStatus\nCheckMandatoryData@MissingSubActionFamily sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-431-MissColumnSubActionFamily.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingSubActionFamilyRows\nCheckMandatoryData@MissingAgingFamily sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-431-MissColumnAgingFamily.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteMissingAgingFamilyRows\nStatusSubActionFamilyAgingFamilyExistenceCheckInSubActionFamiliesAgingFamiliesReplacementStatus sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['11-430-NotExistingSubActionFamily.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteNotExistingSubActionFamilyRows"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteSubActionFamiliesAgingFamiliesReplacement_TransformData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "11-AssetPortfolioActivitiesManagement/Delete"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DeleteSubActionFamiliesAgingFamiliesReplacement",
								"type": "DatasetReference"
							},
							"name": "ReadDeleteSubActionFamiliesAgingFamiliesReplacement"
						},
						{
							"dataset": {
								"referenceName": "TempInput_SubActionFamiliesAgingFamiliesReplacementStatus",
								"type": "DatasetReference"
							},
							"name": "ReadTempStatusSubActionFamiliesAgingFamiliesReplacementStatusEditor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AssetPortfolioActivitiesManagementDeleteRelationship_temp",
								"type": "DatasetReference"
							},
							"name": "WriteToTempRepo"
						},
						{
							"dataset": {
								"referenceName": "TempOutput_Status",
								"type": "DatasetReference"
							},
							"name": "WriteTempStatusStatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor"
						}
					],
					"transformations": [
						{
							"name": "IdSelection"
						},
						{
							"name": "ModelDefinition"
						},
						{
							"name": "StatusColumnSelectionSubActionFamiliesAgingFamiliesReplacementStatusEditor"
						},
						{
							"name": "StatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor"
						}
					],
					"script": "source(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadDeleteSubActionFamiliesAgingFamiliesReplacement\nsource(output(\n\t\tSubActionFamily as string,\n\t\tAgingFamily as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: true) ~> ReadTempStatusSubActionFamiliesAgingFamiliesReplacementStatusEditor\nReadDeleteSubActionFamiliesAgingFamiliesReplacement select(mapColumn(\n\t\t{$sourceId} = SubActionFamily,\n\t\t{$targetId} = AgingFamily\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> IdSelection\nIdSelection derive({$relationshipName} = 'replace_with_RetrofitAgingFamily',\n\t\t{$relationshipDelete} = 'true',\n\t\t{$relationshipId} = {$sourceId} + 'to' + {$targetId}) ~> ModelDefinition\nReadDeleteSubActionFamiliesAgingFamiliesReplacement select(mapColumn(\n\t\tSubActionFamily,\n\t\tAgingFamily\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> StatusColumnSelectionSubActionFamiliesAgingFamiliesReplacementStatusEditor\nReadTempStatusSubActionFamiliesAgingFamiliesReplacementStatusEditor, StatusColumnSelectionSubActionFamiliesAgingFamiliesReplacementStatusEditor exists(ReadTempStatusSubActionFamiliesAgingFamiliesReplacementStatusEditor@SubActionFamily == StatusColumnSelectionSubActionFamiliesAgingFamiliesReplacementStatusEditor@SubActionFamily && ReadTempStatusSubActionFamiliesAgingFamiliesReplacementStatusEditor@AgingFamily == StatusColumnSelectionSubActionFamiliesAgingFamiliesReplacementStatusEditor@AgingFamily,\n\tnegate:true,\n\tbroadcast: 'auto')~> StatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor\nModelDefinition sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['tmp_SuBActionFamiliesAgingFamiliesReplacement.v1.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteToTempRepo\nStatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SubActionFamiliesAgingFamiliesReplacement_status.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> WriteTempStatusStatusUpdateSubActionFamiliesAgingFamiliesReplacementStatusEditor"
				}
			},
			"dependsOn": []
		}
	]
}